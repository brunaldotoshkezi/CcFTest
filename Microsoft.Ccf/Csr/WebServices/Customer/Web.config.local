<?xml version="1.0"?>
<!-- 
    Note: As an alternative to hand editing this file you can use the 
    web admin tool to configure settings for your application. Use
    the Website->Asp.Net Configuration option in Visual Studio.
    A full list of settings and comments can be found in 
    machine.config.comments usually located in 
    \Windows\Microsoft.Net\Framework\v2.x\Config 
-->
<configuration>
  <configSections>
    <sectionGroup name="Microsoft.Ccf">
      <!--Customer-->
      <section name="Csr.WebServices.Customer.Provider" type="Microsoft.Ccf.Common.Providers.Configuration.ProviderConfigurationHandler,Microsoft.Ccf.Common.Providers"/>
      <section name="Common.Listeners" type="Microsoft.Ccf.Common.Listeners.Configuration.ListenerConfigurationHandler, Microsoft.Ccf.Common.Listeners"/>
    </sectionGroup>
  </configSections>
  <Microsoft.Ccf>
    <Csr.WebServices.Customer.Provider defaultProvider="SqlCustomerProvider">
      <providers>
        <add name="SqlCustomerProvider" type="Microsoft.Ccf.Csr.WebServices.Customer.Provider.SqlCustomerProvider,Microsoft.Ccf.Csr.WebServices.Customer.Provider" connectionString="Server=CCFSQL;Integrated Security=true;Database=CcfInfrastructure;Pooling=true" connectionStringCSS="Server=CCFSQL;Integrated Security=true;Database=CCFCSS;Pooling=true"/>
      </providers>
    </Csr.WebServices.Customer.Provider>
    <Common.Listeners>
      <listeners>
        <add name="LoggingLogFile" type="Microsoft.Ccf.Common.Logging.Providers.LoggingLogFile, Microsoft.Ccf.Common.Logging.Providers" logfile="c:\CCF.log" appname="Customer Care Framework"/>
      </listeners>
    </Common.Listeners>
  </Microsoft.Ccf>
  <system.serviceModel>
    <client>
      <endpoint address="http://ccfiis/Microsoft.Ccf.Csr.WebServices.ContactCenter/Configuration.svc"
        binding="basicHttpBinding" bindingConfiguration="Binding1" contract="Microsoft.Ccf.Common.ConfigurationService.Configuration" />
    </client>
    <serviceHostingEnvironment aspNetCompatibilityEnabled="true" />
    <services>
      <service name="Microsoft.Ccf.Csr.WebServices.Customer.Customer" behaviorConfiguration="Behavior1">
        <endpoint address="http://ccfiis/Microsoft.Ccf.Csr.WebServices.Customer/Customer.svc"
          binding="basicHttpBinding" bindingConfiguration="Binding1" contract="Microsoft.Ccf.Csr.WebServices.Customer.Customer" />
        <!-- When secure channel (SSL) is set to Required in IIS, change mexHttpBinding to mexHttpsBinding -->
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange" />
      </service>
    </services>
    <bindings>
      <basicHttpBinding>
        <binding name="Binding1">
          <!--  default maxStringContentLength is insufficient for Configuration service -->
          <readerQuotas maxStringContentLength="99999999" />
          <security mode="TransportCredentialOnly">
            <transport clientCredentialType="Windows" />
          </security>
        </binding>
        <binding name="Binding2">
          <!--  default maxStringContentLength is insufficient for Configuration service -->
          <readerQuotas maxStringContentLength="99999999" />
          <security mode="Transport">
            <transport clientCredentialType="Windows" />
          </security>
        </binding>
      </basicHttpBinding>
    </bindings>
    <behaviors>
      <serviceBehaviors>
        <behavior name="Behavior1">
          <serviceDebug includeExceptionDetailInFaults="True" />
          <!-- When secure channel (SSL) is set to Required in IIS, change httpGetEnabled to httpsGetEnabled -->
          <serviceMetadata httpGetEnabled="True"/>
        </behavior>
      </serviceBehaviors>
    </behaviors>
  </system.serviceModel>
  <connectionStrings/>
  <system.web>
    <!--
            Set compilation debug="true" to insert debugging 
            symbols into the compiled page. Because this 
            affects performance, set this value to true only 
            during development.
        -->
    <compilation debug="true">
    </compilation>
    <!--
            The <authentication> section enables configuration 
            of the security authentication mode used by 
            ASP.NET to identify an incoming user. 
        -->
    <authentication mode="Windows"/>
    <!--
            The <customErrors> section enables configuration 
            of what to do if/when an unhandled error occurs 
            during the execution of a request. Specifically, 
            it enables developers to configure html error pages 
            to be displayed in place of a error stack trace.

            <customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm">
                <error statusCode="403" redirect="NoAccess.htm" />
                <error statusCode="404" redirect="FileNotFound.htm" />
            </customErrors>
        -->
  </system.web>
  <appSettings>
    <add key="ConfigurationArea" value="CustomerWS"/>
  </appSettings>
</configuration>
